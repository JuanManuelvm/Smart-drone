import tkinter as tk
from tkinter import Canvas, Button

class LaberintoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Laberinto con Elementos Especiales")
        
        # Configurar el tamaño de la ventana
        self.root.geometry("550x600")
        
        # Matriz del laberinto (0: vacío, 1: muro, 2: dron, 3: alerta, 4: caja)
        self.laberinto = [
            [1, 1, 0, 0, 0, 0, 0, 1, 1, 1],
            [1, 1, 0, 1, 0, 1, 0, 1, 1, 1],
            [0, 2, 0, 3, 4, 4, 0, 0, 0, 0],
            [0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [3, 3, 0, 1, 0, 1, 1, 1, 1, 1],
            [1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
            [1, 1, 0, 1, 1, 1, 1, 1, 1, 0],
            [1, 1, 0, 0, 0, 0, 4, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        ]
        
        # Tamaño de cada celda
        self.cell_size = 50
        
        # Crear el lienzo para el laberinto
        self.canvas = Canvas(root, bg='white', 
                            width=len(self.laberinto[0])*self.cell_size, 
                            height=len(self.laberinto)*self.cell_size)
        self.canvas.pack()
        
        # Dibujar el laberinto
        self.dibujar_laberinto()
        
        # Crear un frame para los botones
        self.botones_frame = tk.Frame(root)
        self.botones_frame.pack(side=tk.BOTTOM, pady=10)
        
        # Crear botón 1
        self.boton1 = Button(self.botones_frame, text="No Informado", command=self.mover_dron)
        self.boton1.pack(side=tk.LEFT, padx=10)
        
        # Crear botón 2
        self.boton2 = Button(self.botones_frame, text="Informado", command=self.reiniciar)
        self.boton2.pack(side=tk.LEFT, padx=10)

        # Crear botón 3
        self.boton2 = Button(self.botones_frame, text="Reiniciar", command=self.reiniciar)
        self.boton2.pack(side=tk.LEFT, padx=10)
        
        # Posición inicial del dron
        self.dron_pos = self.encontrar_dron()
    
    def encontrar_dron(self):
        """Encuentra la posición del dron en la matriz"""
        for i, fila in enumerate(self.laberinto):
            for j, valor in enumerate(fila):
                if valor == 2:
                    return (i, j)
        return None
    
    def dibujar_laberinto(self):
        """Dibuja el laberinto completo basado en la matriz"""
        for i, fila in enumerate(self.laberinto):
            for j, valor in enumerate(fila):
                x1 = j * self.cell_size
                y1 = i * self.cell_size
                x2 = x1 + self.cell_size
                y2 = y1 + self.cell_size
                
                if valor == 1:  # Muro
                    self.canvas.create_rectangle(x1, y1, x2, y2, fill="gray", outline="black")
                elif valor == 2:  # Dron
                    self.canvas.create_rectangle(x1, y1, x2, y2, fill="white", outline="black")
                    self.canvas.create_oval(x1+5, y1+5, x2-5, y2-5, fill="blue")
                elif valor == 3:  # Alerta
                    self.canvas.create_rectangle(x1, y1, x2, y2, fill="white", outline="black")
                    self.canvas.create_polygon(x1+10, y2-10, x2-10, y2-10, (x1+x2)/2, y1+10, fill="yellow")
                elif valor == 4:  # Caja
                    self.canvas.create_rectangle(x1, y1, x2, y2, fill="white", outline="black")
                    self.canvas.create_rectangle(x1+5, y1+5, x2-5, y2-5, fill="brown")
                else:  # Espacio vacío (0)
                    self.canvas.create_rectangle(x1, y1, x2, y2, fill="white", outline="black")
    
    def mover_dron(self):
        """Función para mover el dron (ejemplo simple)"""
        if not self.dron_pos:
            return
            
        i, j = self.dron_pos
        nuevas_posiciones = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]  # Arriba, abajo, izquierda, derecha
        
        for ni, nj in nuevas_posiciones:
            if 0 <= ni < len(self.laberinto) and 0 <= nj < len(self.laberinto[0]):
                if self.laberinto[ni][nj] == 0:  # Solo se puede mover a espacios vacíos
                    # Actualizar matriz
                    self.laberinto[i][j] = 0
                    self.laberinto[ni][nj] = 2
                    self.dron_pos = (ni, nj)
                    
                    # Redibujar laberinto
                    self.canvas.delete("all")
                    self.dibujar_laberinto()
                    return
    
    def reiniciar(self):
        """Reinicia el laberinto a su estado original"""
        self.laberinto = [
            [1, 1, 0, 0, 0, 0, 0, 1, 1, 1],
            [1, 1, 0, 1, 0, 1, 0, 1, 1, 1],
            [0, 2, 0, 3, 4, 4, 0, 0, 0, 0],
            [0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [3, 3, 0, 1, 0, 1, 1, 1, 1, 1],
            [1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
            [1, 1, 0, 1, 1, 1, 1, 1, 1, 0],
            [1, 1, 0, 0, 0, 0, 4, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        ]
        self.dron_pos = self.encontrar_dron()
        self.canvas.delete("all")
        self.dibujar_laberinto()

# Crear la ventana principal
root = tk.Tk()
app = LaberintoApp(root)
root.mainloop()